---
title: "Parkinson's Families Project: a UK-wide study of early onset and familial Parkinson's disease"
author: Raquel Real 
---

## Libraries
```{r}
load.lib <- c("data.table","dplyr","tidyr","broom","purrr","nnet","ggplot2","knitr","forcats","plinkQC")

install.lib <- load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib) install.packages(lib,dependencies=TRUE) #install missing packages

sapply(load.lib,require,character=TRUE) #load packages
```

## Upload data
```{r}
data <- fread("PFP_data.csv")
```

## Table 1
```{r}
cols <- c("aac","dd")
data[, (cols) := lapply(.SD, as.numeric), .SDcols = cols]  # convert selected columns to numeric

#descriptive statistics for numerical variables
data %>% group_by(group) %>% summarise(count = n_distinct(study_id), mean_dd = mean(dd,na.rm=T), sd_dd = sd(dd,na.rm=T), mean_aac = mean(aac,na.rm=T), sd_aac = sd(aac,na.rm=T)) %>% knitr::kable("simple")

#percentages for categorical variables
cols <- c("sex","consanguineous_self_report","ancestry_genetic","family_status")

# Define a function 
perform_operations <- function(variable) {
    filtered_data <- data %>%
    filter(!is.na(group) & !is.na(.data[[variable]]))

  result <- filtered_data %>%
    group_by(group, .data[[variable]]) %>%
    summarise(count = n_distinct(study_id), .groups = 'drop') %>%
    group_by(group) %>%
    mutate(Percentage = prop.table(count) * 100) %>%
    knitr::kable("simple")
  
  return(result)
}

results <- map(cols, perform_operations)

results

#Kruskal-Wallis test and post-hoc pairwise comparisons with FDR adjusted p-values (numerical variables)
kw_results <- data %>% dplyr::select(group,aac,dd) %>% gather(key, value, -group) %>% 
       group_by(key) %>% 
       do(tidy(kruskal.test(x= .$value, g = .$group)))

kw_results

pairwise_results <- data %>% dplyr::select(group,aac,dd) %>% gather(key, value, -group) %>% 
       group_by(key) %>% 
       do(tidy(pairwise.wilcox.test(x= .$value, g = .$group, p.adjust.method = "BH")))

pairwise_results

#Chi-square or Fisher's exact test with FDR adjusted p-values (categorical variables)
cols <- c("ancestry_genetic","family_status","sex","consanguineous_self_report")

perform_chisq_test <- function(variable) {
  if (variable == "family_status") {
    filtered_data <- data %>%
      filter(!is.na(group) & !is.na(.data[[variable]]) & group != "sEOPD")
  } else {
    filtered_data <- data %>%
      filter(!is.na(group) & !is.na(.data[[variable]]))
  }
  
  contingency_table <- filtered_data %>%
    count(.data[[variable]], group) %>%
    pivot_wider(names_from = group, values_from = n, values_fill = 0)
  
  contingency_matrix <- as.matrix(contingency_table[, -1])
  rownames(contingency_matrix) <- contingency_table$variable
  contingency_table <- as.table(contingency_matrix)
  
  test <- fisher.test(contingency_table,simulate.p.value = TRUE)
  #test <- chisq.test(contingency_table)
  
  p_value_adjusted <- p.adjust(test$p.value, method = "BH")
  #p_value_adjusted <- p.adjust(test$p.value, method = "BH")

  return(list(variable = variable, p_value = test$p.value, p_value_adjusted = p_value_adjusted))
}

#If contigency table has cells with <5 counts, replace Chi-square with Fisher's Exact test in the function above

chisq_results <- map(cols, perform_chisq_test)

results_df <- bind_rows(lapply(chisq_results, function(x) {
  data.frame(variable = x$variable, p_value = x$p_value, p_value_adjusted = x$p_value_adjusted)
}))

results_df
```

## Table 2
```{r}
cols <- c("updrs3","motor_severity","updrs2","moca")
data[, (cols) := lapply(.SD, as.numeric), .SDcols = cols]  # convert selected columns to numeric

#descriptive statistics for numerical variables
genes <- c("lrrk2+","prkn+", "gba+","mutation_negative")
data %>% filter(gene_status %in% genes) %>% group_by(gene_status) %>% summarise(count = n_distinct(study_id), mean_updrs3 = mean(updrs3,na.rm=T), sd_updrs3 = sd(updrs3,na.rm=T), mean_motorSev = mean(motor_severity,na.rm=T), sd_motorSev = sd(motor_severity,na.rm=T), mean_updrs2 = mean(updrs2,na.rm=T), sd_updrs2 = sd(updrs2,na.rm=T), mean_moca = mean(moca,na.rm=T), sd_moca = sd(moca,na.rm=T)) %>% knitr::kable(digits = 3)

#percentages for categorical variables
cols <- c("motor_subtype", "hoehn_yahr","rbd", "dyskinesia", "dystonia", "fluctuations", "oh", "urinary_dysfunction", "constipation", "apathy", "anxiety", "depression", "hallucinations", "impulse_control")
data[, (cols) := lapply(.SD, as.factor), .SDcols = cols] # convert selected columns to factor

perform_operations <- function(variable) {
  result <- data %>%
    filter(gene_status %in% genes & !is.na(.data[[variable]])) %>%
    group_by(gene_status, .data[[variable]]) %>%
    summarise(count = n_distinct(study_id), .groups = 'drop') %>%
    group_by(gene_status) %>%
    mutate(Percentage = prop.table(count) * 100) 
  
  return(result)
}

results <- map(cols, perform_operations)

results %>%
  knitr::kable(digits = 3)

#Regression analysis
data <- data %>%
  mutate(
    prkn_status = case_when(
      gene_status == "prkn+" ~ 1,
      gene_status == "mutation_negative" ~ 0,
      TRUE ~ NA_real_
    ),
    lrrk2_status = case_when(
      gene_status == "lrrk2+" ~ 1,
      gene_status == "mutation_negative" ~ 0,
      TRUE ~ NA_real_
    ),
    gba_status = case_when(
      gene_status == "gba+" ~ 1,
      gene_status == "mutation_negative" ~ 0,
      TRUE ~ NA_real_
    )
  ) %>%
  mutate(across(c(prkn_status, lrrk2_status, gba_status), ~factor(., levels = c(0, 1))))

    #linear regression 
    cols <- c("updrs3","motor_severity","updrs2","moca")

    # Function to perform linear regression
    perform_linear_regression <- function(variable, gene_status_column) {
        filtered_data <- data %>%
            mutate(gene_status = .data[[gene_status_column]]) %>%
            mutate(gene_status = fct_relevel(gene_status, "0"))
  
        formula <- switch(variable,
                    "motor_severity" = as.formula(paste(variable, "~", gene_status_column, "+ sex + aac")),
                    as.formula(paste(variable, "~", gene_status_column, "+ sex + aac + dd")))

        model <- lm(formula, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
        
        model_summary <- model_summary %>%
        mutate(variable = variable, gene_status_column = gene_status_column)
  
    return(model_summary)
    }

    # Apply the function to each variable and gene 
    gene_status_cols <- c("prkn_status", "lrrk2_status", "gba_status")

    regression_results <- map_dfr(gene_status_cols, function(gene_status_column) {
        map_dfr(cols, ~perform_linear_regression(.x, gene_status_column))
    })

    regression_results$p.value <- formatC(regression_results$p.value, format = "e", digits = 2)

    results_table <- regression_results %>%
        filter(term %in% c("prkn_status1", "lrrk2_status1", "gba_status1")) %>%
            dplyr::select(variable, gene_status_column, term, estimate, conf.low, conf.high, p.value) 

    results_table %>%
        knitr::kable(digits = 3)

    #binomial logistic regression 
    cols <- c("dyskinesia","dystonia","fluctuations","oh","constipation","urinary_dysfunction","rbd","apathy","depression","anxiety","hallucinations","impulse_control")
    
    # Function to perform logistic regression
    perform_logistic_regression <- function(variable, gene_status_column) {
        filtered_data <- data %>%
            mutate(gene_status = .data[[gene_status_column]]) %>%
            mutate(gene_status = fct_relevel(gene_status, "0")) 
  
        formula <- as.formula(paste(variable, "~", gene_status_column, "+ sex + aac + dd"))

        model <- glm(formula, family = binomial, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
  
        model_summary <- model_summary %>%
        mutate(variable = variable, gene_status_column = gene_status_column)
  
    return(model_summary)
    }

    # Apply the function to each variable and gene 
    gene_status_cols <- c("prkn_status", "lrrk2_status", "gba_status")

    regression_results <- map_dfr(gene_status_cols, function(gene_status_column) {
        map_dfr(cols, ~perform_logistic_regression(.x, gene_status_column))
    })

    regression_results$p.value <- formatC(regression_results$p.value, format = "e", digits = 2)

    results_table <- regression_results %>%
        filter(term %in% c("prkn_status1", "lrrk2_status1", "gba_status1")) %>%
            dplyr::select(variable, gene_status_column, term, estimate, conf.low, conf.high, p.value) 

    results_table %>%
        knitr::kable(digits = 3)

    #multinomial logistic regression 
    cols <- c("motor_subtype", "hoehn_yahr")

    perform_multinomial_regression <- function(variable, gene_status_column,data) {
        data <- data %>%
            filter(!is.na(gene_status_column) & !is.na(variable)) %>%
                mutate(gene_status = factor(.data[[gene_status_column]], levels = c("0", "1")),
                motor_subtype = fct_relevel(factor(motor_subtype), "Tremor-dominant"))

        formula <- as.formula(paste(variable, "~ gene_status + sex + aac + dd"))

        model <-  multinom(formula, data = data)
        model_summary <- tidy(model,conf.int = TRUE)
        model_summary <- model_summary %>%
        mutate(variable = variable, gene_status_column = gene_status_column)
  
    return(model_summary)
    }

    # Apply the function to each variable and gene 
    gene_status_cols <- c("prkn_status", "lrrk2_status", "gba_status")

    regression_results <- gene_status_cols %>%
        map_dfr(~ {
            gene_status_column <- .x
            cols %>%
            map_dfr(~ perform_multinomial_regression(.x, gene_status_column, data = data))
    })

    results_table <- regression_results %>%
        filter(term == "gene_status1") %>%
            mutate(lower_ci = estimate - 1.96 * std.error,
                    upper_ci = estimate + 1.96 * std.error) %>%
                        dplyr::select(y.level,gene_status_column,estimate,std.error,lower_ci,upper_ci,p.value) 

    results_table %>% 
        knitr::kable(digits = 3)
```

## Supplementary Table 7
```{r}
cols <- c("aac","dd")
data[, (cols) := lapply(.SD, as.numeric), .SDcols = cols]  # convert selected columns to numeric

#descriptive statistics for numerical variables
genes <- c("atxn2+","snca+","lrrk2+","prkn+","pink1+","gba+","mutation_negative")
data %>% filter(gene_status %in% genes) %>% group_by(gene_status) %>% summarise(count = n_distinct(study_id), mean_dd = mean(dd,na.rm=T), sd_dd = sd(dd,na.rm=T), mean_aac = mean(aac,na.rm=T), sd_aac = sd(aac,na.rm=T)) %>% knitr::kable(digits = 1)

#percentages for categorical variables
cols <- c("sex","consanguineous_self_report","ancestry_genetic","family_status")

# Define a function 
perform_operations <- function(variable) {
    filtered_data <- data %>%
    filter(!is.na(gene_status) & !is.na(.data[[variable]]))

  result <- filtered_data %>%
    filter(gene_status %in% genes) %>%
    group_by(gene_status, .data[[variable]]) %>%
    summarise(count = n_distinct(study_id), .groups = 'drop') %>%
    group_by(gene_status) %>%
    mutate(Percentage = prop.table(count) * 100) %>%
    knitr::kable(digits = 3)
  
  return(result)
}

results <- map(cols, perform_operations)

results

#Kruskal-Wallis test and post-hoc pairwise comparisons with FDR adjusted p-values (numerical variables)
kw_results <- data %>% filter(gene_status %in% genes) %>% dplyr::select(gene_status,aac,dd) %>% gather(key, value, -gene_status) %>% 
       group_by(key) %>% 
       do(tidy(kruskal.test(x= .$value, g = .$gene_status)))

kw_results 

pairwise_results <- data %>% filter(gene_status %in% genes) %>% dplyr::select(gene_status,aac,dd) %>% gather(key, value, -gene_status) %>% 
       group_by(key) %>% 
       do(tidy(pairwise.wilcox.test(x= .$value, g = .$gene_status, p.adjust.method = "BH")))

pairwise_results %>%
    filter(group1 == "mutation_negative" | group2 == "mutation_negative") %>%
    knitr::kable(digits = 4)

#Chi-square or Fisher's exact test with FDR adjusted p-values (categorical variables)
cols <- c("ancestry_genetic","family_status","sex","consanguineous_self_report")

perform_chisq_test <- function(variable) {
    filtered_data <- data %>%
      filter(!is.na(gene_status) & !is.na(.data[[variable]]))
  
  contingency_table <- filtered_data %>%
    filter(gene_status %in% genes) %>%
    count(.data[[variable]], gene_status) %>%
    pivot_wider(names_from = gene_status, values_from = n, values_fill = 0)
  
  contingency_matrix <- as.matrix(contingency_table[, -1])
  rownames(contingency_matrix) <- contingency_table$variable
  contingency_table <- as.table(contingency_matrix)
  
  test <- fisher.test(contingency_table,simulate.p.value = TRUE)
  #test <- chisq.test(contingency_table)
  
  p_value_adjusted <- p.adjust(test$p.value, method = "BH")
  #p_value_adjusted <- p.adjust(test$p.value, method = "BH")

  return(list(variable = variable, p_value = test$p.value, p_value_adjusted = p_value_adjusted))
}

#If contigency table has cells with <5 counts, replace Chi-square with Fisher's Exact test in the function above

chisq_results <- map(cols, perform_chisq_test)

results_df <- bind_rows(lapply(chisq_results, function(x) {
  data.frame(variable = x$variable, p_value = x$p_value, p_value_adjusted = x$p_value_adjusted)
}))

results_df %>%
    knitr::kable(digits = 3)
```

## Supplementary Table 8
```{r}
cols <- c("aac","dd","updrs3","motor_severity","updrs2","moca")
data[, (cols) := lapply(.SD, as.numeric), .SDcols = cols]  # convert selected columns to numeric

#descriptive statistics for numerical variables
data %>% filter(!is.na(prkn_group)) %>% group_by(prkn_group) %>% summarise(count = n_distinct(study_id), mean_dd = mean(dd,na.rm=T), sd_dd = sd(dd,na.rm=T), mean_aac = mean(aac,na.rm=T), sd_aac = sd(aac,na.rm=T), mean_updrs3 = mean(updrs3,na.rm=T), sd_updrs3 = sd(updrs3,na.rm=T), mean_motorSev = mean(motor_severity,na.rm=T), sd_motorSev = sd(motor_severity,na.rm=T), mean_updrs2 = mean(updrs2,na.rm=T), sd_updrs2 = sd(updrs2,na.rm=T), mean_moca = mean(moca,na.rm=T), sd_moca = sd(moca,na.rm=T)) %>% knitr::kable(digits = 1)

#percentages for categorical variables
cols <- c("rbd", "dyskinesia", "dystonia", "fluctuations", "oh", "urinary_dysfunction", "constipation", "apathy", "anxiety", "depression", "hallucinations", "impulse_control")
data[, (cols) := lapply(.SD, as.factor), .SDcols = cols] # convert selected columns to factor

perform_operations <- function(variable) {
  result <- data %>%
    filter(!is.na(prkn_group) & !is.na(.data[[variable]])) %>%
    group_by(prkn_group, .data[[variable]]) %>%
    summarise(count = n_distinct(study_id), .groups = 'drop') %>%
    group_by(prkn_group) %>%
    mutate(Percentage = prop.table(count) * 100) 
  
  return(result)
}

results <- map(cols, perform_operations)

results %>%
  knitr::kable(digits = 1)

#Regression analysis
    #linear regression 
    cols <- c("aac","dd","updrs3","motor_severity","updrs2","moca")

    # Function to perform linear regression
    perform_linear_regression <- function(variable,data,ref_category) {
        filtered_data <- data %>%
            filter(!is.na(prkn_group) & !is.na(.data[[variable]])) %>%
            mutate(prkn_group = fct_relevel(factor(prkn_group), ref_category))
  
        formula <- switch(variable,
                    "aac" = as.formula(paste(variable, "~ prkn_group + sex + dd")),
                    "dd" = as.formula(paste(variable, "~ prkn_group + sex")),
                    "motor_severity" = as.formula(paste(variable, "~ prkn_group + sex + aac")),
                    as.formula(paste(variable, "~ prkn_group + sex + aac + dd")))

        model <- lm(formula, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)

        model_summary <- model_summary %>%
        mutate(variable = variable, reference = ref_category)
  
    return(model_summary)
    }

    # Apply the function to each variable
    regression_results_mutNeg <- map_dfr(cols, ~ perform_linear_regression(.x, data, "mutation_negative"))
    regression_results_biAllelic <- map_dfr(cols, ~ perform_linear_regression(.x, data, "bi-allelic"))

    regression_results <- bind_rows(regression_results_mutNeg, regression_results_biAllelic)

    results_table <- regression_results %>%
            dplyr::select(variable,reference,term, estimate, conf.low, conf.high, p.value) 

    results_table %>% 
        filter(reference == "mutation_negative" & term == "prkn_groupmono-allelic" | reference == "bi-allelic" & term == "prkn_groupmono-allelic") %>%
        knitr::kable(digits = 3)

    #binomial logistic regression 
    cols <- c("dyskinesia","dystonia","fluctuations","oh","constipation","urinary_dysfunction","rbd","apathy","depression","anxiety","hallucinations","impulse_control")
    
    # Function to perform logistic regression
    perform_logistic_regression <- function(variable,data,ref_category) {
        filtered_data <- data %>%
            filter(!is.na(prkn_group) & !is.na(.data[[variable]])) %>%
            mutate(prkn_group = fct_relevel(factor(prkn_group), ref_category))
  
        formula <- as.formula(paste(variable, "~ prkn_group + sex + aac + dd"))

        model <- glm(formula, family = binomial, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
  
        model_summary <- model_summary %>%
        mutate(variable = variable,reference = ref_category)
  
    return(model_summary)
    }

    # Apply the function to each variable 
    regression_results_mutNeg <- map_dfr(cols, ~ perform_logistic_regression(.x, data, "mutation_negative"))
    regression_results_biAllelic <- map_dfr(cols, ~ perform_logistic_regression(.x, data, "bi-allelic"))
    
    regression_results <- bind_rows(regression_results_mutNeg, regression_results_biAllelic)

    results_table <- regression_results %>%
            dplyr::select(variable,reference,term, estimate, conf.low, conf.high, p.value) 

    results_table %>% 
        filter(reference == "mutation_negative" & term == "prkn_groupmono-allelic" | reference == "bi-allelic" & term == "prkn_groupmono-allelic") %>%
        knitr::kable(digits = 3)
```

## Supplementary Table 10
```{r}
gba_variants <- c("mild","risk","severe",NA)
filtered_data <- data %>% filter(!is.na(gba_status) & (GBA_severity %in% gba_variants))
filtered_data <- filtered_data %>% replace_na(list(GBA_severity = "mutation_negative"))

cols <- c("updrs3","motor_severity","updrs2","moca")
filtered_data[, (cols) := lapply(.SD, as.numeric), .SDcols = cols]  # convert selected columns to numeric

#descriptive statistics for numerical variables
filtered_data %>% group_by(GBA_severity) %>% summarise(count = n_distinct(study_id), mean_updrs3 = mean(updrs3,na.rm=T), sd_updrs3 = sd(updrs3,na.rm=T), mean_motorSev = mean(motor_severity,na.rm=T), sd_motorSev = sd(motor_severity,na.rm=T), mean_updrs2 = mean(updrs2,na.rm=T), sd_updrs2 = sd(updrs2,na.rm=T), mean_moca = mean(moca,na.rm=T), sd_moca = sd(moca,na.rm=T)) %>% knitr::kable(digits = 3)

#percentages for categorical variables
cols <- c("motor_subtype", "hoehn_yahr","rbd", "dyskinesia", "dystonia", "fluctuations", "oh", "urinary_dysfunction", "constipation", "apathy", "anxiety", "depression", "hallucinations", "impulse_control")
filtered_data[, (cols) := lapply(.SD, as.factor), .SDcols = cols] # convert selected columns to factor

perform_operations <- function(variable) {
  result <- filtered_data %>%
    filter(!is.na(.data[[variable]])) %>%
    group_by(GBA_severity, .data[[variable]]) %>%
    summarise(count = n_distinct(study_id), .groups = 'drop') %>%
    group_by(GBA_severity) %>%
    mutate(Percentage = prop.table(count) * 100) 
  
  return(result)
}

results <- map(cols, perform_operations)

results %>%
  knitr::kable(digits = 3)

#Regression analysis
    #linear regression 
    cols <- c("updrs3","motor_severity","updrs2","moca")

    # Function to perform linear regression
    perform_linear_regression <- function(variable) {
        filtered_data <- filtered_data %>%
            mutate(GBA_severity = fct_relevel(GBA_severity, "mutation_negative"))
  
        formula <- switch(variable,
                    "motor_severity" = as.formula(paste(variable, "~ GBA_severity + sex + aac")),
                    as.formula(paste(variable, "~ GBA_severity + sex + aac + dd")))

        model <- lm(formula, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
        
        model_summary <- model_summary %>%
        mutate(variable = variable)
  
    return(model_summary)
    }

    # Apply the function to each variable
    regression_results <- map_dfr(cols, perform_linear_regression)

    results_table <- regression_results %>%
            dplyr::select(variable,term, estimate, conf.low, conf.high, p.value) 

    results_table %>% 
        filter(term %in% c("GBA_severityrisk", "GBA_severitymild", "GBA_severitysevere")) %>%
        knitr::kable(digits = 3)

    #binomial logistic regression 
    cols <- c("dyskinesia","dystonia","fluctuations","oh","constipation","urinary_dysfunction","rbd","apathy","depression","anxiety","hallucinations","impulse_control")
    
    # Function to perform logistic regression
    perform_logistic_regression <- function(variable) {
        filtered_data <- filtered_data %>%
            mutate(GBA_severity = fct_relevel(GBA_severity, "mutation_negative"))
  
        formula <- as.formula(paste(variable, "~ GBA_severity + sex + aac + dd"))

        model <- glm(formula, family = binomial, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
        
        model_summary <- model_summary %>%
        mutate(variable = variable)
  
    return(model_summary)
    }

    # Apply the function to each variable 
    regression_results <- map_dfr(cols, perform_logistic_regression)

    results_table <- regression_results %>%
            dplyr::select(variable,term, estimate, conf.low, conf.high, p.value) 

    results_table %>% 
        filter(term %in% c("GBA_severityrisk", "GBA_severitymild", "GBA_severitysevere")) %>%
        knitr::kable(digits = 3)

    #multinomial logistic regression 
    cols <- c("motor_subtype", "hoehn_yahr")

    perform_multinomial_regression <- function(variable,filtered_data) {
        filtered_data <- filtered_data %>%
            filter(!is.na(.data[[variable]])) %>%
                mutate(GBA_severity = fct_relevel(GBA_severity, "mutation_negative"),
                motor_subtype = fct_relevel(factor(motor_subtype), "Tremor-dominant"),
                hoehn_yahr = fct_relevel(factor(hoehn_yahr), "0-1.5"))

        formula <- as.formula(paste(variable, "~ GBA_severity + sex + aac + dd"))

        model <-  multinom(formula, data = filtered_data)
        model_summary <- tidy(model,conf.int = TRUE)
        model_summary <- model_summary %>%
        mutate(variable = variable) %>%
        separate(term, into = c("base", "level"), sep = "_", fill = "right") %>%
        mutate(level = ifelse(is.na(level), "", level)) %>%
        unite(term, base, level, sep = "")
  
    return(model_summary)
    }

    # Apply the function to each variable 
    regression_results <- map_dfr(cols, ~ perform_multinomial_regression(.x, filtered_data))

    results_table <- regression_results %>%
            mutate(lower_ci = estimate - 1.96 * std.error,
                    upper_ci = estimate + 1.96 * std.error) %>%
                        dplyr::select(variable,y.level,term,estimate,std.error,lower_ci,upper_ci,p.value) 

    results_table %>% 
        filter(term %in% c("GBAseverityrisk", "GBAseveritymild", "GBAseveritysevere")) %>%
        knitr::kable(digits = 3)
```

## Polygenic Risk Score Analysis
QC NCA binary files
```{bash}
plink --bfile PFP_1 \
    --mind 0.05 \
    --geno 0.05 \
    --make-bed \
    --out PFP_snpmiss_callrate

plink --bfile PFP_snpmiss_callrate \
    --geno 0.01 \
    --maf 0.05 \
    --indep-pairwise 50 5 0.5 \
    --out pruning

plink --bfile PFP_snpmiss_callrate \
    --extract pruning.prune.in \
    --make-bed \
    --out pruned_data

plink --bfile pruned_data 
    --het \
    --out prunedHet
```

Calculate heterozygosity rate and flag indviduals with HR > 3sd from mean HR for exclusion in the next step
```{r}
het <- fread("prunedHet.het", head=TRUE)
het$HET_RATE = (het$"N(NM)" - het$"O(HOM)")/het$"N(NM)"
het_fail = subset(het, (het$HET_RATE > mean(het$HET_RATE)+3*sd(het$HET_RATE)));
het_fail$HET_DST = (het_fail$HET_RATE-mean(het$HET_RATE))/sd(het$HET_RATE);
write.table(het_fail, "fail-het-qc.txt", row.names=FALSE)
```

Exclude heterozygosity outliers and sex mismatch
```{bash}
sed 's/"//g' fail-het-qc.txt | awk '{print$1, $2}' > het_fail_ind.txt 

plink --bfile PFP_snpmiss_callrate \
    --remove het_fail_ind.txt \
    --make-bed \
    --out PFP_snpmiss_callrate_het
 
plink --bfile PFP_snpmiss_callrate_het \
    --check-sex 0.25 0.75 \
    --maf 0.05 \
    --out sex_check

grep "PROBLEM" sex_check.sexcheck | awk '{print$1,$2}' > sex.discrepancy.txt 

plink --bfile PFP_snpmiss_callrate_het \
    --remove sex.discrepancy.txt \
    --make-bed \
    --out PFP_snpmiss_callrate_het_sexcheck

plink --bfile PFP_snpmiss_callrate_het_sexcheck \
    --geno 0.01 \
    --maf 0.05 \
    --indep-pairwise 50 5 0.5 \
    --out pruning

plink --bfile PFP_snpmiss_callrate_het_sexcheck \
    --extract pruning.prune.in \
    --missing \
    --genome --min 0.9 \
    --out IBD_check
```

Create file with one individual from each pair of duplicates for exclusion in the next step
```{r}
qcdir <- "/path/to/working_directory"
name <- "IBD_check"

relatednessQC <- evaluate_check_relatedness(
  qcdir,
  name,
  highIBDTh = 0.125,
  imissTh = 0.03,
  interactive = FALSE,
  verbose = FALSE
)

list2env(relatednessQC,envir = .GlobalEnv)

write.table(failIDs,"IBD_DUPLICATES.txt",quote=FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
write.table(fail_highIBD[,c(1:5,10)],"IBD_PAIRS.txt",quote=FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)

```

Exclude duplicates 
```{bash}
plink --bfile PFP_snpmiss_callrate_het_sexcheck \
    --remove IBD_DUPLICATES.txt \
    --make-bed \
    --out PFP_snpmiss_callrate_het_sexcheck_ibd
```

Prepare binary files for imputation
```{bash}
plink --bfile PFP_snpmiss_callrate_het_sexcheck_ibd \
    --geno 0.01 \
    --maf 0.01 \
    --make-bed \
    --out PFP_impute_qc_1

plink --bfile PFP_impute_qc_1 \
    --filter-controls \
    --hwe 1E-5 \
    --write-snplist

plink --bfile PFP_impute_qc_1 \
    --extract plink.snplist \
    --make-bed \
    --out PFP_impute_qc_2

#Generate frequencies file
plink --bfile PFP_impute_qc_2 \
    --freq \
    --out PFP_impute_qc_2

#Execute program to check .bim file against the HRC reference panel - available to download from https://www.chg.ox.ac.uk/~wrayner/tools/ 
perl /path/to/HRC-1000G-check-bim.pl -b PFP_impute_qc_2.bim -f PFP_impute_qc_2.frq -r /path/to/HRC.r1-1.GRCh37.wgs.mac5.sites.tab -h

./Run-plink.sh

#Convert to vcf
for chnum in {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
  do
  plink --bfile PFP_impute_qc_2-updated-chr$chnum --recode vcf --chr $chnum --out PFP_impute_qc_2-$chnum &
done

#Sort by position
for chnum in {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
  do
	vcf-sort PFP_impute_qc_2-$chnum.vcf | bgzip -c >  pre_impute_PFP_impute_qc_2_$chnum.vcf.gz &
done

#Files are ready to upload to https://imputation.biodatacatalyst.nhlbi.nih.gov
```

Post-imputation QC
```{bash}

#When ready, download imputed files from imputation server before executing next steps

for n in $(seq 1 22); do
  filename1="chr$n.dose.vcf.gz"
  filename2="chr$n.info"
  # Use the filename variable as needed
  echo "$filename1"
  echo "$filename2"
  # Run plink command with the filename
  plink --vcf "$filename1" \
    --vcf-min-gp 0.9 \
    --biallelic-only \
    --double-id \ 
    --allow-no-sex \
    --qual-scores "$filename2" 7 1 1 \
    --qual-threshold 0.3 \
    --maf 0.01 \
    --geno 0.05 \
    --make-bed \
    --out "PFP.TopMed.chr$n.R2_0.3.QC"
done

#Merge chromosome files
ls | grep "*.R2_0.3.QC.bim" > merge_list.txt
sed -i 's/.bim//g' merge_list.txt
plink --merge-list merge_list.txt \
    --make-bed \
    --out PFP.TopMed.allchromosomes.R2_0.3_QC

#Update sex and phenotype in .fam file
plink --bfile PFP.TopMed.allchromosomes.R2_0.3_QC \
    --pheno update_phenotype.txt \
    --update-sex update_sex.txt \
    --make-bed \
    --out PFP_forPRS 

#Final QC
plink --bfile PFP_forPRS \
    --maf 0.05 \
    --mind 0.1 \
    --geno 0.1 \
    --hwe 1e-6 \
    --make-bed \
    --out PFP_forPRS.qc
```

Polygenic risk score calculation
```{bash}
# Download PRSice-2 from https://choishingwan.github.io/PRSice/
# BASE dataset available to download from http://ftp.ebi.ac.uk/pub/databases/gwas/summary_statistics/GCST009001-GCST010000/GCST009324/GCST009324.tsv

TARGET=/path/to/PFP_forPRS.qc
BASE=/path/to/Nalls_sumstats.tab 
PREFIX=PFP_PRS

Rscript /path/to/PRSice.R \
--prsice /path/to/PRSice  \
--target $TARGET \
--base $BASE \
--beta \
--stat b \
--snp SNP \
--A1 A1 \
--A2 A2 \
--pvalue p \
--score avg \
--binary-target T \
--prevalence 0.01 \
--out $PREFIX \
--print-snp \
--perm 10000 \

```

PRS z-transformation
```{r}
FILE <- "/path/to/PFP_PRS" #file generated in step above
OUT <- "PFP_PRS" #prefix of output file to be used in next step 
COVAR <- "/path/to/covariate_PRS.txt" #file containing phenotype and covariates 

prs <- as.data.frame(fread(paste0(FILE, ".best"), header = T))
pheno_covar <- as.data.frame(fread(COVAR, header = T))

names(prs)[4] <- "PRS"

prs_pheno_covar <- inner_join(prs, pheno_covar, by = c("FID", "IID"))

prs_pheno_covar$Zscore <- (prs_pheno_covar$PRS - mean(prs_pheno_covar$PRS)) / sd(prs_pheno_covar$PRS)

write.csv(prs_pheno_covar, paste0(OUT, "_normalised"), quote = F, row.names = F)
```

Logistic regression
```{r}
FILE <- "/path/to/PFP_PRS_model"

#MODEL1: Supplementary Figure 2A
REF <- "PD-mutationPos" #reference category for regression analysis

prs_norm <- as.data.frame(fread(paste0(FILE,"_1_normalised"), header = T))

prs_norm$PHENO <- as.factor(prs_norm$PHENO)
prs_norm$PHENO <- relevel(prs_norm$PHENO, ref = REF)

model <- glm(PHENO ~ Zscore + AAO + SEX + PC1 + PC2 + PC3 + PC4 + PC5 , data = prs_norm, family = binomial)

model_summary <- tidy(model, conf.int = TRUE)

model_summary %>% filter(term == "Zscore") %>% 
    knitr::kable(digits = 3)


#MODEL2: Supplementary Figure 2B
REF <- "sEOPD" #reference category for regression analysis

prs_norm <- as.data.frame(fread(paste0(FILE,"_2_normalised"), header = T))

prs_norm$PHENO <- as.factor(prs_norm$PHENO)
prs_norm$PHENO <- relevel(prs_norm$PHENO, ref = REF)

model <- multinom(PHENO ~ Zscore + SEX + PC1 + PC2 + PC3 + PC4 + PC5, data = prs_norm, maxit=1000)

model_summary <- tidy(model)

model_summary %>% filter(term == "Zscore") %>% 
    mutate(lower.ci = exp(estimate - 1.96 * std.error),
            upper.ci = exp(estimate + 1.96 * std.error),
            OR = exp(estimate)) %>%
    dplyr::rename(group = y.level) %>%
    dplyr::select(group,term,OR,lower.ci,upper.ci,p.value) %>%
    knitr::kable(digits = 3)
```

## NCA liftOver to build hg38 - needed for determination of genetic ancestry in GenoTools
```{bash}
plink --bfile PFP_1 --output-chr M --make-bed --out PFP_2
```

Load libraries
```{r}
load.lib <- c("data.table","dplyr","GenomicRanges","liftOver","rtracklayer","Repitools")

install.lib <- load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib) install.packages(lib,dependencies=TRUE) #install missing packages

sapply(load.lib,require,character=TRUE) #load packages

```

Load NCA bim file
```{r}
PFP.19 <- fread("PFP_2.bim")
```

Create bed file 
```{r}
bed <- PFP.19 %>%
  select(V1, V4, V2) %>%
  mutate(
    chrom = paste("chr", V1, sep = ""),
    chromStart = V4,
    chromEnd = V4,
    SNP = V2
  ) %>%
  select(-V1, -V4) %>%
  mutate(score = seq.int(nrow(bim)))

bed <- bed %>%
  select(chrom, chromStart, chromEnd, score, SNP)

bed$chromStart <- format(bed$chromStart, scientific = FALSE)
bed$chromEnd <- format(bed$chromEnd, scientific = FALSE)
```

Create GRanges object
```{r}
gr <- makeGRangesFromDataFrame(bed,
  keep.extra.columns = TRUE,
  seqinfo = NULL,
  seqnames.field = "chrom",
  start.field = "chromStart",
  end.field = "chromEnd",
  starts.in.df.are.0based = FALSE
)

genome(gr) <- "hg19"
```

Run liftOver
```{r}
chain <- import.chain("hg19ToHg38.over.chain") #available to download from https://hgdownload.soe.ucsc.edu/gbdb/hg19/liftOver/

seqlevelsStyle(gr) <- "UCSC" 
PFP.38 <- liftOver(gr, chain)

PFP.38 <- unlist(PFP.38)
genome(PFP.38) <- "hg38"
```

Create list of mapped snps for extraction with plink
```{r}
mapped_snps <- mcols(PFP.38)
mapped_snps <- as.data.frame(mapped_snps) %>% select(SNP)
fwrite(mapped_snps, "PFP_liftover_SNPs.txt", sep = "\t", col.names = FALSE)
```

Create new map file to update positions in plink
```{r}
liftover <- annoGR2DF(PFP.38)

new_bim <- liftover %>%
  select(SNP, start)

new_bim$start <- format(new_bim$start, scientific = FALSE)

fwrite(new_bim, "PFP_liftover_map.txt", sep = "\t", col.names = FALSE)
```

Create new SNP id file (old, new) and set names as chr:bp to update in plink
```{r}
new_snpID <- liftover %>%
  mutate(chr = sub("chr(.*)", "\\1", chr))

new_snpID <- new_snpID %>%
  filter(!is.na(chr)) %>%
  mutate(newSNP = paste(chr, start, sep = ":")) %>%
  select(SNP, newSNP)

fwrite(new_snpID, "PFP_liftover_snpid.txt", sep = "\t", col.names = FALSE)
```

Update binary files 
```{bash}

plink --bfile PFP_2 \
  --make-bed \
  --out PFP_2_hg38 \
  --update-map PFP_liftover_map.txt \
  --extract PFP_liftover_SNPs.txt 

plink --bfile PFP_2_hg38 \
  --update-name PFP_liftover_snpid.txt \
  --make-bed \
  --out PFP_2_hg38_updated
```

Run GenoTools - reference panels available to download from https://github.com/dvitale199/GenoTools/
N.B. a beta cloud version of GenoTools was used that is no longer available; please check the website above for downloading the current version and user instructions 
```{bash}
plink --bfile PFP_2_hg38_updated \
    --geno 0.01 \
    --update-sex sex.txt \
    --pheno phenotype.txt \
    --make-bed \
    --out PFP_forGenoTools

GENO_PATH=/path/to/PFP_forGenoTools
REF_PANEL_PATH=/path/to/ref_panel_gp2_prune_rm_underperform_pos_update 
REF_LABELS_PATH=/path/to/ref_panel_ancestry.txt 
OUT_PATH=/path/to/output_files

python3 cloud_genotools/qc_cloud_predict_pipeline.py \
--geno $GENO_PATH --ref $REF_PANEL_PATH --ref_labels $REF_LABELS_PATH \
--model NeuroChip --callrate 0.1 --out $OUT_PATH
```

## END
